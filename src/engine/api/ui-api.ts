import { enumerate } from 'enumerate'
import { TypedEventEmitter } from 'typed-event-emitter'

/** A single piece of content that should be displayed during a dialog 'cutscene'. */
export interface Speech {
  /** the source (i.e. speaker, etc.) of the narration or dialog */
  speaker: string

  /** the actual message (description, dialog, etc.) */
  message: string
}

/**
 * Events generated by the UI controller.
 **/
export type UiControllerEvents = {
  /** Emitted when ther user interface is visible and responding to events and commands. */
  ready: {
    ui: UiApi
  }
}

/**
 * Array of constants that can be used to iterate over all creature events in the CreatureEvents declaration.
 * The types guarantee this is an exhaustive list.
 */
export const UiControllerEventNames = enumerate<keyof UiControllerEvents>()(
  'ready'
)

/** event emitter type for creatures */
export class UiControllerEventEmitter extends TypedEventEmitter<{
  [k in keyof UiControllerEvents]: (event: UiControllerEvents[k]) => void
}> {}

export type UiApi = Readonly<{
  /**
    * Show the supplied speech content to the user.
    */
  showSpeech (speech: Speech[]): Promise<void>
}>

export type UiController = UiControllerEventEmitter & UiApi
